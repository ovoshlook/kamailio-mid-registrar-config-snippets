#!KAMAILIO

debug=2
log_stderror=yes

listen=udp:127.0.0.1:6060

alias=mid-reg-shared-creds-at-scale

auto_aliases=no

children=1

loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "jsonrpcs.so"
loadmodule "pv.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "siputils.so"
loadmodule "textops.so"
loadmodule "xlog.so"
loadmodule "dispatcher.so"
loadmodule "uac.so"
loadmodule "auth.so"
loadmodule "auth_db.so"
loadmodule "db_mysql.so"
loadmodule "sqlops.so"

#!define DISPATCHER_LIST "/home/iurii/private/kamailioworld2025/kam_mid_registrar/shared_creds_at_scale/dispatcher.list"
#!define DBURL "mysql://root:a1s2d3f4@localhost/kamailio"
#!define SQLOPS_URL "ca=>mysql://root:a1s2d3f4@localhost/kamailio"

modparam("jsonrpcs", "pretty_format", 1)
modparam("ctl", "binrpc", "unix:/run/kamailio/kamailio_ctl")

modparam("dispatcher", "list_file", DISPATCHER_LIST)
modparam("dispatcher", "ds_ping_method", "OPTIONS")
modparam("dispatcher", "ds_ping_from", "sip:proxy@localhost")
modparam("dispatcher", "ds_ping_interval", 3)
modparam("dispatcher", "ds_probing_threshold", 2)
modparam("dispatcher", "ds_ping_reply_codes", "code=501;code=403;code=404;code=401;code=400;code=200")
modparam("dispatcher", "ds_probing_mode", 1)
modparam("dispatcher", "ds_ping_latency_stats", 1) 
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "xavp_dst", "ds_dst")

modparam("uac","auth_password_avp","$avp(s:passwd)") 

modparam("auth", "nonce_count", yes)

modparam("auth_db", "db_url", DBURL)
modparam("sqlops","sqlcon", SQLOPS_URL)

request_route {
	// I took the 8th scenario to show more precisely what happens at the route[MID_REGISTRAR_AT_SCALE_REQ]
	// You can replace 8th with 11th scenario. Then the loop over ds_dst won't be needed
	ds_select_dst(1,8);
	route(MID_REGISTRAR_AT_SCALE_REQ);
	t_relay();
}

route[AUTH] {
	if (!auth_check("$fd", "subscriber", "1")) {
		if (($rc) == -5) {
			auth_challenge("$fd", "0");
			return(-1);
		} else {
			sl_send_reply("403", "Forbidden");
			xlog("L_WARN","$fU failed register for $si\n");
		}
		return(-1);
	}
	return(1);
}

route[MID_REGISTRAR_AT_SCALE_REQ] {
	if !is_method("REGISTER") return;
	
	add_path();

	if !route(AUTH) exit;

	remove_hf("Authorization");
	$var(i) = 0;
	t_newtran();
	t_on_branch_failure("MID_REGISTRAR_AT_SCALE_REP");
	while ($xavp(ds_dst[$var(i)]) != $null) {
		xlog("L_INFO","uri[$var(i)]: $xavp(ds_dst[$var(i)]=>uri)\n");
			if ( $var(i) == 0 ) {
			$ru = $xavp(ds_dst[$var(i)]=>uri);
			$du = $xavp(ds_dst[$var(i)]=>uri);
			xlog("L_INFO","Sending original reg to: $xavp(ds_dst[$var(i)]=>uri)\n");
		} else {
		
			append_branch();
			$(branch(uri)[-1]) = $xavp(ds_dst[$var(i)]=>uri);
			$(branch(dst_uri)[-1]) = $xavp(ds_dst[$var(i)]=>uri);
			xlog("L_INFO","Sending replicated reg to: $xavp(ds_dst[$var(i)]=>uri)\n");
		}
		$var(i) = $var(i) + 1;
	}
}

event_route[tm:branch-failure:MID_REGISTRAR_AT_SCALE_REP] {
	if !is_method("REGISTER") return;
    	if !ds_is_from_list("1","1","sip:$T_rpl($si)") {
		return;
	}
	if (t_check_status("401|407")) {
		return;
	}
	sql_pvquery("ca","select password from subscriber where username='$(fU{s.escape.common})'"," $avp(passwd)");
	$avp(uname)=$fU;
	if uac_auth() {
		$ru = "sip:"+$T_rpl($si);
		$du = "sip:"+$T_rpl($si);
		xlog("L_INFO","Sending auth request to $ru: $du");
		t_relay();
	}
	drop;
	exit;
}


