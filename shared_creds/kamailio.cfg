#!KAMAILIO

debug=2
log_stderror=yes

listen=udp:127.0.0.1:6060

alias=mid-reg-shared-creds

auto_aliases=no

children=1

loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "jsonrpcs.so"
loadmodule "pv.so"
loadmodule "tm.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "db_mysql.so"
loadmodule "uac.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "auth.so"
loadmodule "auth_db.so"

modparam("jsonrpcs", "pretty_format", 1)
modparam("ctl", "binrpc", "unix:/run/kamailio/kamailio_ctl")

#!define DBURL "mysql://root:a1s2d3f4@localhost/kamailio"

modparam("auth", "nonce_count", yes)
modparam("auth_db", "db_url", DBURL)

modparam("uac","reg_db_url", DBURL)
modparam("uac", "reg_contact_addr", "localhost:5060" )

modparam("registrar","min_expires",300)
modparam("registrar","max_expires",600)

registrar_server.address="10.10.10.1"

request_route {
	route(MID_REGISTRAR_WITH_UAC);
	if is_method("INVITE") && 
	   !has_totag() && 
	   $si == $sel(cfg_get.registrar_server.address) {	
		if (!lookup("location")) {
			sl_send_reply(404,"Not found");
			exit;
		}
		t_relay();
	}
}


route[AUTH] {
	if (!auth_check("$fd", "subscriber", "1")) {
		auth_challenge("$fd", "0");
		return(-1);
	}	
	return(1);
}

route[REGISTER] {
	if !save("location") {
		sl_reply_error();
		return(-1);
	}
	return(1);
}

route[MID_REGISTRAR_WITH_UAC] {
	if !is_method("REGISTER") return;
	$var(status) = uac_reg_status("$fU");
	switch ($var(status)) {
		case -1:
		case -2:
		case -3:
			exit;
		case -99: // optional.
			// We don't need that if we keep internal registrations
			// if we keep it just move AUTH and REGISTER routes after switch
			if !route(AUTH) exit;
	}
	if route(REGISTER) {
		uac_reg_enable("l_uuid","$fU"); 
	}
	if $expires(max) == 0 {
		uac_reg_disable("l_uuid","$fU"); // optional. We may keep registrations internally
	}
	exit;
}


