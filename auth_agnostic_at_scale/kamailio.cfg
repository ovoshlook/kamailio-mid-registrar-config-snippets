#!KAMAILIO

debug=2
log_stderror=yes

listen=udp:127.0.0.1:6060

alias=mid-reg-auth-agnostic-at-scale

auto_aliases=no

children=1

loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "jsonrpcs.so"
loadmodule "pv.so"
loadmodule "textops.so"
loadmodule "textopsx.so"
loadmodule "xlog.so"
loadmodule "htable.so"
loadmodule "tm.so"
loadmodule "sl.so"
loadmodule "path.so"
loadmodule "dispatcher"

modparam("jsonrpcs", "pretty_format", 1)
modparam("ctl", "binrpc", "unix:/run/kamailio/kamailio_ctl")
modparam("htable", "htable", "auth_done=>size=4;autoexpire=600")

#!define DISPATCHER_LIST "/home/iurii/private/kamailioworld2025/kam_mid_registrar/auth_agnostic_at_scale/dispatcher.list"

modparam("dispatcher", "list_file", DISPATCHER_LIST)
modparam("dispatcher", "ds_ping_method", "OPTIONS")
modparam("dispatcher", "ds_ping_from", "sip:proxy@localhost")
modparam("dispatcher", "ds_ping_interval", 3)
modparam("dispatcher", "ds_probing_threshold", 2)
modparam("dispatcher", "ds_ping_reply_codes", "code=501;code=403;code=404;code=401;code=400;code=200")
modparam("dispatcher", "ds_probing_mode", 1)
modparam("dispatcher", "ds_ping_latency_stats", 1) 
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "xavp_dst", "ds_dst")

request_route {
	// I took the 8th scenario to show more precisely what happens at the route[PROXY_REGISTER]
	// You can replace 8th with 13th scenario (serial forking), then loop over ds_dst won't be needed
	ds_select_dst(1,8);
	route(PROXY_REGISTRAR);	
	t_relay();
}

route[PROXY_REGISTRAR] {
    if !is_method("REGISTER") return;
    add_path();
    $var(i) = 0;
    while ($xavp(ds_dst[$var(i)]) != $null) {
        if ( $var(i) == 0 ) {
            $ru = $xavp(ds_dst[$var(i)]=>uri);
            $du = $xavp(ds_dst[$var(i)]=>uri);
            xlog("L_INFO","Sending original reg to: $xavp(ds_dst[$var(i)]=>uri)\n");
        } else {
            append_branch();
            t_on_branch("HANDLE_AUTH");
            $(branch(uri)[-1]) = $xavp(ds_dst[$var(i)]=>uri);
            $(branch(dst_uri)[-1]) = $xavp(ds_dst[$var(i)]=>uri);
	        xlog("L_INFO","Sending replicated reg to: $xavp(ds_dst[$var(i)]=>uri)\n");
        }
        $var(i) = $var(i) + 1;
    }
}

branch_route[HANDLE_AUTH] {
    if !is_method("REGISTER") return;  
    $var(i)=0;
    $var(realm) = 'realm="' + $rd + ':' + $rp + '"';
    while ($(hdr(Authorization)[$var(i)]) != $null || $(hdr(Authorization)[$var(i)]) != "") {
        $avp(AUTH) = $(hdr(Authorization)[$var(i)]);
        if $avp(AUTH) =~ $var(realm) {
            xlog("L_INFO","[$var(i)]:  $avp(AUTH) found for { $ru }\n");
            break;
        }
        $var(i) = $var(i) + 1;
    }
    if $avp(AUTH) != $null {
        remove_hf("Authorization");
        append_hf("Authorization: $avp(AUTH)\r\n");
        xlog("L_INFO","Auth added $avp(AUTH) to REGISTER for { $ru }\n");
    }
}



